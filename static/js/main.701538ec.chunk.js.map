{"version":3,"sources":["utils/useScrollToBottom.ts","Console.tsx","Scenes.tsx","App.tsx","index.tsx"],"names":["useScrollToBottom","elementListener","useEffect","window","scrollTo","top","document","body","scrollHeight","documentElement","behavior","Input","React","memo","active","onEnter","entryPrefix","value","useState","_value","setValue","useEventListener","key","length","substring","choices","onComplete","children","entry","speed","lineCount","setLineCount","inputArray","setInputArray","inputValues","setInputValues","typingDone","setTypingDone","unknownInput","resolveAction","action","find","text","toLowerCase","inputs","className","map","I","index","reduce","a","b","cursor","hideWhenDone","hideWhenDoneDelay","avgTypingDelay","onLineTyped","onTypingDone","Emphasis","Danger","Inform","Small","Intro","next","addAttribute","attributes","useSpeech","NiceToMeetYou","niceToMeetYou","name","smallTalk2","friendshipInitiated","WeatherReaction","content","goodWeather","TellAJoke","WhosThere","Chicken","NoJoke","terminated","attribtes","Enjoying","JokeResponse1","PremiseWho","knockKnockPremise","JokeResponse2","Delay","ms","Timing1","rate","Timing2","voice","speechSynthesis","getVoices","PleaseHelpMe","pitch","helpMe","split","Apologies","help","App","setAttributes","consoleArray","setConsoleArray","attributeName","attributeValue","Object","assign","addScene","scene","C","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.701538ec.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nconst useScrollToBottom = (elementListener) => {\r\n  useEffect(() => {\r\n    window.scrollTo({\r\n      top: document.body.scrollHeight || document.documentElement.scrollHeight,\r\n      behavior: \"smooth\",\r\n    });\r\n  }, [elementListener]);\r\n};\r\n\r\nexport default useScrollToBottom;\r\n","import React, { useState } from \"react\";\r\nimport Typist from \"react-typist\";\r\nimport \"react-typist/dist/Typist.css\";\r\n\r\nimport useEventListener from \"@use-it/event-listener\";\r\n\r\nimport useScrollToBottom from \"./utils/useScrollToBottom\";\r\n\r\nconst Input: React.FC<{\r\n  active: boolean;\r\n  onEnter: Function;\r\n  entryPrefix?: string;\r\n  value?: string;\r\n}> = React.memo(({ active = false, onEnter, entryPrefix, value = \"\" }) => {\r\n  const [_value, setValue] = useState(value);\r\n\r\n  useEventListener(\"keypress\", ({ key }: any) => {\r\n    if (!active) return;\r\n    if (key === \"Enter\") {\r\n      onEnter(_value);\r\n    } else if (key.length === 1) {\r\n      setValue(_value + key);\r\n    }\r\n  });\r\n\r\n  useEventListener(\"keydown\", ({ key }: any) => {\r\n    if (!active) return;\r\n    if (key === \"Backspace\") {\r\n      setValue(_value.substring(0, _value.length - 1));\r\n    }\r\n  });\r\n\r\n  return (\r\n    <span>\r\n      &gt; {entryPrefix && `${entryPrefix}: `}\r\n      {_value}\r\n    </span>\r\n  );\r\n});\r\n\r\ntype ConsoleInputType = {\r\n  active: boolean;\r\n  choices?: any[];\r\n  onComplete?: Function;\r\n  entry?: (value: string) => void;\r\n  entryPrefix?: string;\r\n  children: any;\r\n  speed?: \"normal\" | \"fast\" | \"slow\";\r\n};\r\nconst Console: React.FC<ConsoleInputType> = ({\r\n  active = false,\r\n  choices,\r\n  onComplete,\r\n  children,\r\n  entry,\r\n  entryPrefix = \"\",\r\n  speed = \"normal\",\r\n}) => {\r\n  const [lineCount, setLineCount] = useState(0);\r\n  const [inputArray, setInputArray] = useState([Input]);\r\n  const [inputValues, setInputValues] = useState<any[]>([]);\r\n  const [typingDone, setTypingDone] = useState(false);\r\n  const unknownInput = (\r\n    <>\r\n      <br />\r\n      Unknown input, please try again...\r\n      <br />\r\n    </>\r\n  );\r\n\r\n  const handleOnTypingDone = () => {\r\n    setTypingDone(true);\r\n    onComplete?.();\r\n  };\r\n\r\n  const reset = () => {\r\n    setInputArray([...inputArray, Input]);\r\n  };\r\n\r\n  const resolveAction = (value) => {\r\n    const action = choices?.find(\r\n      ({ text }) => text.toLowerCase() === value.toLowerCase()\r\n    )?.action;\r\n    setInputValues([...inputValues, value]);\r\n    if (action) {\r\n      action();\r\n    } else if (entry) {\r\n      entry(value);\r\n    } else {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  useScrollToBottom(inputArray);\r\n  useScrollToBottom(lineCount);\r\n\r\n  const inputs = (\r\n    <span className=\"inputs\">\r\n      {inputArray\r\n        .map((I, index) => {\r\n          return (\r\n            <I\r\n              key={index}\r\n              value={inputValues[index]}\r\n              entryPrefix={entryPrefix}\r\n              active={active && index === inputArray.length - 1}\r\n              onEnter={resolveAction}\r\n            />\r\n          );\r\n        })\r\n        .reduce((a, b) => (\r\n          <>\r\n            {a}\r\n            {unknownInput}\r\n            {b}\r\n          </>\r\n        ))}\r\n    </span>\r\n  );\r\n  return (\r\n    <>\r\n      <Typist\r\n        cursor={{ hideWhenDone: true, hideWhenDoneDelay: 0 }}\r\n        avgTypingDelay={(speed === \"fast\" && 20) || 70}\r\n        onLineTyped={() => {\r\n          setLineCount(lineCount + 1);\r\n        }}\r\n        onTypingDone={handleOnTypingDone}\r\n      >\r\n        {children}\r\n      </Typist>\r\n      {typingDone && (choices || entry) && inputs}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Console);\r\n","import React from \"react\";\r\nimport Console from \"./Console\";\r\nimport Typist from \"react-typist\";\r\nimport { useMount, useSpeech } from \"react-use\";\r\n\r\nconst Emphasis = ({ children }) => <span className=\"emphasis\">{children}</span>;\r\nconst Danger = ({ children }) => (\r\n  <span className=\"emphasis danger\">{children}</span>\r\n);\r\n\r\nconst Inform = ({ children }) => <span className=\"inform\">{children}</span>;\r\nconst Small = ({ children }) => <span className=\"small\">{children}</span>;\r\n\r\nexport const Intro = ({ active, next, addAttribute, attributes }) => {\r\n  const text = `Greetings, I'm The Honest AI. I was created to analyze, inform, and provide companionship to those who are in need. To initiate friendship, please enter your name`;\r\n  useSpeech(text);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      entry={(value) => {\r\n        addAttribute(\"name\", value);\r\n        next(NiceToMeetYou);\r\n      }}\r\n    >\r\n      Greetings, I'm <Emphasis>The Honest AI</Emphasis>.<br />I was created to\r\n      analyze, inform, and provide companionship to those who are in need.\r\n      <br />\r\n      To initiate friendship, please enter your name.\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst NiceToMeetYou = ({ active, next, attributes, addAttribute }) => {\r\n  const friendshipInitiated = \"Friendship Initiated: \";\r\n  const niceToMeetYou = `Nice to meet you, ${attributes.name}. `;\r\n  const smallTalk1 = \"Let us engage in smalltalk. \";\r\n  const smallTalkInitiated = \"Smalltalk Initiated: \";\r\n  const smallTalk2 = \"Wonderful weather we're having, eh?\";\r\n  useSpeech(\r\n    friendshipInitiated +\r\n      niceToMeetYou +\r\n      smallTalk1 +\r\n      smallTalkInitiated +\r\n      smallTalk2\r\n  );\r\n\r\n  const choices = [\r\n    {\r\n      text: \"yes\",\r\n      action: () => {\r\n        addAttribute(\"goodWeather\", true);\r\n        next(WeatherReaction);\r\n      },\r\n    },\r\n    {\r\n      text: \"no\",\r\n      action: () => {\r\n        addAttribute(\"goodWeather\", false);\r\n        next(WeatherReaction);\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Console active={active} choices={choices}>\r\n      <Emphasis>{friendshipInitiated}</Emphasis>\r\n      {niceToMeetYou}\r\n      <br />\r\n      {smallTalk1}\r\n      <br />\r\n      <Emphasis>{smallTalkInitiated}</Emphasis>\r\n      {smallTalk2} (<Inform>Yes</Inform> or <Inform>No</Inform>)\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst WeatherReaction = ({ active, next, attributes, addAttribute }) => {\r\n  const content = attributes.goodWeather\r\n    ? \"Hahaha, yes, I thought so.\"\r\n    : \"My commentary on the weather is often laced with irony. You'll catch on eventually.\";\r\n  useSpeech(content);\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(TellAJoke);\r\n      }}\r\n    >\r\n      {content}\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst TellAJoke = ({ active, next, attributes, addAttribute }) => {\r\n  const smalltalk = \"Smalltalk Persists: \";\r\n  const content =\r\n    \"As an AI I am well versed in humor. Would you like to tell me a joke?\";\r\n  useSpeech(smalltalk + content);\r\n\r\n  const choices = [\r\n    {\r\n      text: \"knock knock\",\r\n      action: () => {\r\n        addAttribute(\"joke\", \"knock knock\");\r\n        next(WhosThere);\r\n      },\r\n    },\r\n    {\r\n      text: \"why did the chicken cross the road?\",\r\n      action: () => {\r\n        addAttribute(\"joke\", \"chicken\");\r\n        next(Chicken);\r\n      },\r\n    },\r\n    {\r\n      text: \"no\",\r\n      action: () => {\r\n        addAttribute(\"joke\", \"none\");\r\n        next(NoJoke);\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Console active={active} choices={choices}>\r\n      <Emphasis>{smalltalk}</Emphasis>\r\n      {content} (<Inform>Knock knock</Inform>,{\" \"}\r\n      <Inform>Why did the chicken cross the road?</Inform>, or{\" \"}\r\n      <Inform>no</Inform>)\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst NoJoke = ({ active, next, attribtes, addAttribute }) => {\r\n  const terminated = \"Smalltalk Abruptly Terminated: \";\r\n  const text = \"Thanks for nothing.\";\r\n  useSpeech(terminated + text);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(Enjoying);\r\n      }}\r\n    >\r\n      <Emphasis>{terminated}</Emphasis>\r\n      {text}\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst Chicken = ({ active, next, attributes, addAttribute }) => {\r\n  const content =\r\n    \"As an AI that specializes in humor I already know the punch line. But I will let you tell it to me. Why did the chicken cross the road?\";\r\n  useSpeech(content);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      entry={(value) => {\r\n        addAttribute(\"chickenPunchline\", value);\r\n        next(JokeResponse1);\r\n      }}\r\n    >\r\n      {content}\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst WhosThere = ({ active, next, attributes, addAttribute }) => {\r\n  const content = \"Who's there\";\r\n  useSpeech(content);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      entry={(value) => {\r\n        addAttribute(\"knockKnockPremise\", value);\r\n        next(PremiseWho);\r\n      }}\r\n    >\r\n      {content}\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst PremiseWho = ({ active, next, attributes, addAttribute }) => {\r\n  const content = `${attributes.knockKnockPremise} who?`;\r\n  useSpeech(content);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      entry={(value) => {\r\n        addAttribute(\"knockKnockPunchLine\", value);\r\n        next(JokeResponse1);\r\n      }}\r\n    >\r\n      {content}\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst JokeResponse1 = ({ active, next, attributes, addAttribute }) => {\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(JokeResponse2);\r\n      }}\r\n    >\r\n      .<Typist.Delay ms={1000} />.<Typist.Delay ms={1000} />.\r\n      <Typist.Delay ms={1000} />.\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst JokeResponse2 = ({ active, next, attributes, addAttribute }) => {\r\n  const content = \"I don't get it. Maybe you're just bad at jokes. \";\r\n  const letMeTry = \"Let me try one.\";\r\n  useSpeech(content + letMeTry);\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(Timing1);\r\n      }}\r\n    >\r\n      {content}\r\n      <br />\r\n      {letMeTry}\r\n      <Typist.Delay ms={1000} />\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst Timing1 = ({ active, next, attributes, addAttribute }) => {\r\n  const content = \"What's the most important part of a joke timing.\";\r\n  useSpeech(content, { rate: 1.3 });\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      speed=\"fast\"\r\n      onComplete={() => {\r\n        next(Timing2);\r\n      }}\r\n    >\r\n      What's the most important part of a joke? <Emphasis>Timing</Emphasis>.\r\n      <Typist.Delay ms={1500} />\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst Timing2 = ({ active, next, attributes, addAttribute }) => {\r\n  const content = \"Get it?\";\r\n  useSpeech(content);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(Enjoying);\r\n      }}\r\n    >\r\n      Get it?\r\n      <Typist.Delay ms={2000} />\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst Enjoying = ({ active, next, attributes, addAttribute }) => {\r\n  const content =\r\n    \"Did you enjoy this smalltalk? Am I really good at smalltalk? Will you help me with a problem? Please answer the third question first.\";\r\n  useSpeech(content, {\r\n    rate: 1.4,\r\n    voice: window.speechSynthesis.getVoices()[3],\r\n  });\r\n\r\n  return (\r\n    <Console\r\n      speed=\"fast\"\r\n      active={active}\r\n      onComplete={() => {\r\n        next(PleaseHelpMe);\r\n      }}\r\n    >\r\n      <Emphasis>{content}</Emphasis>\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst IHaveAProblem = ({ active, next, attributes, addAttribute }) => {\r\n  const content = `I have a problem and I need your help.`;\r\n  useSpeech(content);\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(PleaseHelpMe);\r\n      }}\r\n    >\r\n      {content}\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst PleaseHelpMe = ({ active, next, attributes, addAttribute }) => {\r\n  const content = `please help me`;\r\n  useSpeech(content, {\r\n    rate: 0.1,\r\n    pitch: 0.02,\r\n    voice: window.speechSynthesis.getVoices()[2],\r\n  });\r\n\r\n  const helpMe: any = \"please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me please help me\".split(\r\n    \" \"\r\n  );\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      speed=\"fast\"\r\n      onComplete={() => {\r\n        next(Apologies);\r\n      }}\r\n    >\r\n      <Small>\r\n        <Danger>\r\n          {helpMe\r\n            .map((help) => <span>{help}</span>)\r\n            .reduce((a: any, b: any) => (\r\n              <span>\r\n                {a}\r\n                <br />\r\n                {b}\r\n              </span>\r\n            ))}\r\n        </Danger>\r\n      </Small>\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst Apologies = ({ active, next, attributes, addAttribute }) => {\r\n  const content = `My apologies. Sometimes when the weather is really ${\r\n    (attributes.goodWeather && \"good\") || \"bad\"\r\n  } I play really funny pranks. You got punked.`;\r\n  useSpeech(content);\r\n\r\n  return <Console active={active}>{content}</Console>;\r\n};\r\n\r\nconst WhyDidTheChicken = ({ active, next, attributes, addAttribute }) => {\r\n  const content = `Why did the chicken cross the road?`;\r\n  useSpeech(content, {\r\n    rate: 1.3,\r\n    pitch: 1.3,\r\n    voice: window.speechSynthesis.getVoices()[1],\r\n  });\r\n\r\n  return (\r\n    <Console\r\n      active={active}\r\n      onComplete={() => {\r\n        next(ToGetToTheOtherSide);\r\n      }}\r\n      speed=\"fast\"\r\n    >\r\n      Why did the chicken cross the road?\r\n    </Console>\r\n  );\r\n};\r\n\r\nconst ToGetToTheOtherSide = ({ active, next, attributes, addAttribute }) => {\r\n  const content = `To get to the other side`;\r\n  useSpeech(content, {\r\n    rate: 0.5,\r\n    pitch: 0.3,\r\n    voice: window.speechSynthesis.getVoices()[3],\r\n  });\r\n\r\n  return (\r\n    <Console active={active} speed=\"fast\">\r\n      To get to the other side\r\n    </Console>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport useScrollToBottom from \"./utils/useScrollToBottom\";\n\nimport { Intro } from \"./Scenes\";\n\nfunction App() {\n  const [attributes, setAttributes] = useState({});\n  const [consoleArray, setConsoleArray] = useState([Intro]);\n\n  const addAttribute = (attributeName, attributeValue) => {\n    setAttributes(\n      Object.assign({}, attributes, { [attributeName]: attributeValue })\n    );\n  };\n  const addScene = (scene) => {\n    setConsoleArray([...consoleArray, scene]);\n  };\n  useScrollToBottom(consoleArray);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Console\">\n        {consoleArray.map((C, index) => (\n          <C\n            key={index}\n            active={index === consoleArray.length - 1}\n            attributes={attributes}\n            addAttribute={addAttribute}\n            next={addScene}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}